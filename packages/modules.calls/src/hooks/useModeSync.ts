import { useCallback } from 'react';
import { useNavigate } from '@tanstack/react-router';
import { RemoteParticipant } from 'livekit-client';
import { useCallStore } from '../store/callStore';
import { useLiveKitDataChannel, useLiveKitDataChannelListener } from './useLiveKitDataChannel';

const MODE_SYNC_MESSAGE_TYPE = 'mode_sync';

type ModeSyncPayload = {
  mode: 'compact' | 'full';
  boardId?: string;
};

export const useModeSync = () => {
  const navigate = useNavigate();
  const updateStore = useCallStore((state) => state.updateStore);
  const { sendMessage } = useLiveKitDataChannel();

  const handleModeSyncMessage = useCallback(
    (message: { type: string; payload: unknown }, participant?: RemoteParticipant) => {
      try {
        if (message.type === MODE_SYNC_MESSAGE_TYPE) {
          const payload = message.payload as ModeSyncPayload;

          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º payload
          if (!payload || typeof payload !== 'object') {
            console.error('‚ùå Invalid mode sync payload:', payload);
            return;
          }

          if (!payload.mode || !['compact', 'full'].includes(payload.mode)) {
            console.error('‚ùå Invalid mode value:', payload.mode);
            return;
          }

          console.log(
            'üîÑ Received mode sync message:',
            payload,
            'from participant:',
            participant?.identity,
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –≤ store
          updateStore('mode', payload.mode);
          console.log('‚úÖ Mode updated in store to:', payload.mode);

          // –ï—Å–ª–∏ –µ—Å—Ç—å boardId, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ—Å–∫—É
          if (payload.boardId && typeof payload.boardId === 'string') {
            console.log('üéØ Navigating to board:', payload.boardId);
            navigate({ to: '/board/$boardId', params: { boardId: payload.boardId } });
          }
        }
      } catch (error) {
        console.error('‚ùå Error handling mode sync message:', error);
        // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      }
    },
    [updateStore, navigate],
  );

  // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞
  useLiveKitDataChannelListener(handleModeSyncMessage);

  const syncModeToOthers = useCallback(
    (mode: 'compact' | 'full', boardId?: string) => {
      try {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (!mode || !['compact', 'full'].includes(mode)) {
          console.error('‚ùå Invalid mode for sync:', mode);
          return;
        }

        if (boardId && typeof boardId !== 'string') {
          console.error('‚ùå Invalid boardId for sync:', boardId);
          return;
        }

        const payload: ModeSyncPayload = {
          mode,
          boardId,
        };

        console.log('üì§ Sending mode sync message to all participants:', payload);
        sendMessage(MODE_SYNC_MESSAGE_TYPE, payload);
      } catch (error) {
        console.error('‚ùå Error sending mode sync message:', error);
        // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      }
    },
    [sendMessage],
  );

  return {
    syncModeToOthers,
  };
};
