import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalTitle,
  ModalFooter,
  ModalCloseButton,
} from '@xipkg/modal';
import { Input } from '@xipkg/input';
import { Button } from '@xipkg/button';
import { ScrollArea } from '@xipkg/scrollarea';
import { Badge } from '@xipkg/badge';
import { Checkbox } from '@xipkg/checkbox';
import { useState } from 'react';
import { Close, Search } from '@xipkg/icons';
import { useNavigate, useParams } from '@tanstack/react-router';
import { useCallStore } from '../../store';
import { useModeSync } from '../../hooks';
import {
  useCurrentUser,
  useGetClassroomMaterialsList,
  useAddClassroomMaterials,
} from 'common.services';

// –¢–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ common.types -> ClassroomMaterialsT

type WhiteboardsModalProps = {
  open: boolean;
  onOpenChange: (open: boolean) => void;
};

export const WhiteboardsModal = ({ open, onOpenChange }: WhiteboardsModalProps) => {
  const navigate = useNavigate();
  const { callId } = useParams({ strict: false });
  const updateStore = useCallStore((state) => state.updateStore);
  const { syncModeToOthers } = useModeSync();
  const { data: user } = useCurrentUser();
  const isTutor = user?.default_layout === 'tutor';
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedBoardId, setSelectedBoardId] = useState<number | null>(null);
  const [isCollaborativeMode, setIsCollaborativeMode] = useState(true);

  // –•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
  const { addClassroomMaterials } = useAddClassroomMaterials();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–∞ (classroomId == callId)
  const {
    data: boards,
    isLoading,
    isError,
  } = useGetClassroomMaterialsList({
    classroomId: callId || '',
    content_type: 'board',
    disabled: !callId || !isTutor,
  });

  const filteredWhiteboards = (boards || [])
    // —Ç–æ–ª—å–∫–æ –¥–æ—Å–∫–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (read_write)
    .filter((b) => b.content_kind === 'board' && b.student_access_mode === 'read_write')
    // —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    .filter((b) =>
      searchQuery.trim() ? b.name.toLowerCase().includes(searchQuery.trim().toLowerCase()) : true,
    );

  const handleBoardSelect = (boardId: number) => {
    setSelectedBoardId(boardId);
  };

  const handleCreateNewBoard = async () => {
    if (!callId) return;

    try {
      console.log('üéØ Creating new board...');

      const result = await addClassroomMaterials.mutateAsync({
        classroomId: callId,
        content_kind: 'board',
        student_access_mode: 'read_write', // –†–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      });

      if (result?.data?.id) {
        const newBoardId = parseInt(result.data.id);
        console.log('‚úÖ New board created with ID:', newBoardId);

        // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É
        setSelectedBoardId(newBoardId);

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        if (isCollaborativeMode) {
          syncModeToOthers('compact', newBoardId.toString(), callId);
          console.log('üì§ Mode sync message sent to all participants for new board');
        }

        // –ù–ï –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é –¥–æ—Å–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –µ—ë –≤—Ä—É—á–Ω—É—é
        console.log('‚úÖ New board created and selected, ready for manual navigation');
      }
    } catch (error) {
      console.error('‚ùå Error creating new board:', error);
    }
  };

  const handleConfirm = () => {
    if (selectedBoardId) {
      console.log('üéØ WhiteboardsModal: handleConfirm called with boardId:', selectedBoardId);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
      updateStore('mode', 'compact');
      console.log('‚úÖ Local mode updated to compact');

      // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
      if (isCollaborativeMode) {
        syncModeToOthers('compact', selectedBoardId.toString(), callId);
        console.log('üì§ Mode sync message sent to all participants for collaborative mode');
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ—Å–∫—É
      navigate({
        to: '/board/$boardId',
        params: { boardId: selectedBoardId.toString() },
        search: { classroom: callId, call: callId },
      });
      console.log('üß≠ Navigation to board initiated');

      onOpenChange(false);
    }
  };

  return (
    <Modal open={open} onOpenChange={onOpenChange}>
      <ModalContent className="w-[680px]">
        <ModalCloseButton>
          <Close className="fill-gray-80 sm:fill-gray-0" />
        </ModalCloseButton>
        <ModalHeader className="border-gray-20 border-b">
          <ModalTitle>–î–æ—Å–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã</ModalTitle>
          <Input
            before={<Search className="fill-gray-60" />}
            placeholder="–ü–æ–∏—Å–∫"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </ModalHeader>

        <div className="py-4 pr-2 pl-6">
          {isLoading ? (
            <div className="flex items-center justify-center py-8">
              <p className="text-gray-60">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–æ–∫...</p>
            </div>
          ) : isError ? (
            <div className="flex items-center justify-center py-8">
              <p className="text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å–æ–∫</p>
            </div>
          ) : (
            <ScrollArea className="h-full max-h-[400px] w-full">
              <div className="space-y-4 pr-4">
                {filteredWhiteboards.map((board) => (
                  <div
                    key={board.id}
                    className={`hover:bg-gray-5 flex cursor-pointer flex-col gap-2 rounded-2xl border p-4 ${
                      selectedBoardId === board.id ? 'border-brand-100 bg-brand-0' : ''
                    }`}
                    onClick={() => handleBoardSelect(board.id)}
                  >
                    {/* –ë–µ–π–¥–∂ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç—É–ø–∞, –∫–∞–∫ –≤ CardMaterials */}
                    {board.student_access_mode && (
                      <Badge
                        variant="default"
                        className={
                          board.student_access_mode === 'read_write'
                            ? 'text-s-base bg-gray-10 text-gray-60 px-2 py-1 font-medium'
                            : board.student_access_mode === 'read_only'
                              ? 'text-s-base bg-cyan-20 px-2 py-1 font-medium text-cyan-100'
                              : 'text-s-base bg-violet-20 px-2 py-1 font-medium text-violet-100'
                        }
                      >
                        {board.student_access_mode === 'read_write'
                          ? '—Å–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
                          : board.student_access_mode === 'read_only'
                            ? '—Ç–æ–ª—å–∫–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä'
                            : '—á–µ—Ä–Ω–æ–≤–∏–∫'}
                      </Badge>
                    )}
                    <h3 className="text-m-base text-gray-100">{board.name}</h3>
                    <p className="text-xs-base text-gray-60">
                      –ò–∑–º–µ–Ω–µ–Ω–æ: {new Date(board.updated_at).toLocaleDateString()}
                    </p>
                  </div>
                ))}
                <div
                  className="bg-brand-0 group flex h-[80px] cursor-pointer flex-col items-center justify-center gap-2 rounded-2xl p-4"
                  onClick={handleCreateNewBoard}
                >
                  <h3 className="text-s-base text-brand-100 group-hover:text-brand-80">
                    {addClassroomMaterials.isPending ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é'}
                  </h3>
                </div>
              </div>
            </ScrollArea>
          )}
        </div>

        <ModalFooter className="border-gray-20 flex flex-col gap-4 border-t">
          <div className="flex items-center gap-2">
            <Checkbox
              id="collaborative-mode"
              checked={isCollaborativeMode}
              onCheckedChange={(checked) => setIsCollaborativeMode(checked === true)}
            />
            <label
              htmlFor="collaborative-mode"
              className="text-s-base cursor-pointer text-gray-100"
            >
              –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å–∫—É –≤ —Ä–µ–∂–∏–º–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
              <br />
              –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–≤–æ–Ω–∫–∞
            </label>
          </div>
          <div className="flex gap-2">
            <Button size="m" onClick={handleConfirm} disabled={!selectedBoardId}>
              –í—ã–±—Ä–∞—Ç—å
            </Button>
            <Button size="m" variant="secondary" onClick={() => onOpenChange(false)}>
              –û—Ç–º–µ–Ω–∏—Ç—å
            </Button>
          </div>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};
