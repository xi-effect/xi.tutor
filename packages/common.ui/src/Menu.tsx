import { Close } from '@xipkg/icons';
import { Button } from '@xipkg/button';
import { driver, type DriveStep } from 'driver.js';
import 'driver.js/dist/driver.css';
import '../utils/driver.css';
import { createRoot } from 'react-dom/client';
import { useCurrentUser, useOnboardingTransition } from 'common.services';
import { useState, useEffect } from 'react';

type MenuT = {
  disabled?: boolean;
  steps?: DriveStep[];
};

const SESSION_STORAGE_KEY = 'onboarding_menu_hidden';

export const Menu = ({ disabled = false, steps = [] }: MenuT) => {
  const { data: user, isLoading } = useCurrentUser();
  const [isHidden, setIsHidden] = useState(false);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const { transitionStage } = useOnboardingTransition('completed', 'forwards');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º sessionStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const hiddenInSession = sessionStorage.getItem(SESSION_STORAGE_KEY);
    if (hiddenInSession === 'true') {
      setIsHidden(true);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏
  const hideMenuForSession = () => {
    sessionStorage.setItem(SESSION_STORAGE_KEY, 'true');
    setIsHidden(true);
  };

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
  if (isLoading) {
    return null;
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
  if (!user) {
    return null;
  }

  // // –ï—Å–ª–∏ onboarding_stage –Ω–µ "training" –∏–ª–∏ –º–µ–Ω—é —Å–∫—Ä—ã—Ç–æ –≤ —Å–µ—Å—Å–∏–∏, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  if (user.onboarding_stage !== 'training' || isHidden || isTransitioning) {
    return null;
  }

  const driverAction = () => {
    // –°–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è
    hideMenuForSession();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const missingElements = steps
      .map((step) => step.element)
      .filter(
        (selector): selector is string =>
          typeof selector === 'string' && !document.querySelector(selector),
      );

    if (missingElements.length > 0) {
      console.warn('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', missingElements);
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
    }

    const driverObj = driver({
      popoverClass: 'my-custom-popover-class',
      showProgress: true,
      steps: steps,

      onPopoverRender: (popover) => {
        const defaultCloseButton = popover.closeButton;
        const customCloseButton = document.createElement('button');
        customCloseButton.className = 'driver-popover-close-btn';

        // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–µ–Ω—å –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        const root = createRoot(customCloseButton);
        root.render(<Close size="s" className="fill-gray-60 h-4 w-4" />);

        defaultCloseButton.replaceWith(customCloseButton);
        customCloseButton.addEventListener('click', () => {
          driverObj.destroy();
        });
      },
      nextBtnText: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
      prevBtnText: '–ù–∞–∑–∞–¥',
      doneBtnText: '–ó–∞–≤–µ—Ä—à–∏—Ç—å',
      progressText: '{{current}} –∏–∑ {{total}}',
      onDestroyed: () => {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if (isTransitioning) return;

        setIsTransitioning(true);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–∞ 'completed' –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        transitionStage.mutate(undefined, {
          onSuccess: () => {
            // –û—á–∏—â–∞–µ–º sessionStorage –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
            sessionStorage.removeItem(SESSION_STORAGE_KEY);
            setIsTransitioning(false);
          },
          onError: (error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', error);
            setIsTransitioning(false);
            // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          },
        });
      },
    });
    driverObj.drive();
  };

  return (
    <>
      <div className="bg-gray-0 border-gray-10 fixed bottom-0 left-1/2 mb-6 flex w-[calc(100vw-2rem)] max-w-[400px] -translate-x-1/2 transform flex-col gap-6 rounded-2xl border-2 p-4 shadow-2xl sm:w-[400px]">
        <Button
          variant="ghost"
          size="s"
          className="hover:bg-gray-0 bg-gray-0 absolute top-1 right-1 hover:cursor-pointer"
          onClick={hideMenuForSession}
        >
          <Close className="fill-gray-60 h-4 w-4" />
        </Button>
        <div className="flex flex-col gap-2">
          <div className="h-8">
            <span className="text-xl font-semibold text-gray-100">
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sovlium! üòä
            </span>
          </div>
          <div className="h-10">
            <span className="text-gray-80 text-sm font-normal tracking-tight">
              –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã?
              <br />
              –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—É—á–µ–Ω–∏—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.
            </span>
          </div>
        </div>
        <div className="flex flex-row-reverse gap-4">
          <Button
            variant="brand"
            type="button"
            disabled={disabled}
            onClick={() => driverAction()}
            size="s"
            className="bg-brand-80 text-gray-0 mt-1 flex h-[32px] w-[153px] flex-row items-center justify-start rounded-lg p-2 hover:cursor-pointer"
          >
            <span className="pl-2 text-[14px] font-medium">–ü—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ</span>
          </Button>
          <Button
            variant="ghost"
            type="button"
            disabled={undefined}
            onClick={hideMenuForSession}
            size="s"
            className="hover:bg-gray-5 border-gray-30 mt-1 flex h-[32px] w-[153px] flex-row items-center justify-start rounded-lg border p-2 hover:cursor-pointer"
          >
            <span className="pl-2 text-[14px] font-medium">–í–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ</span>
          </Button>
        </div>
      </div>
    </>
  );
};
