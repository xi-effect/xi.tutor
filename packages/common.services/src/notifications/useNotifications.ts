/* eslint-disable @typescript-eslint/no-explicit-any */
import { useState, useCallback } from 'react';
import { toast } from 'sonner';
import { useSocketEvent, useSocketEmit } from 'common.sockets';
import { NotificationT, NotificationsStateT } from 'common.types';

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockNotifications: NotificationT[] = [
  {
    id: '1',
    type: 'message',
    title: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ',
    description: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ',
    date: new Date(Date.now() - 5 * 60 * 1000).toISOString(),
    isRead: false,
  },
  {
    id: '2',
    type: 'lesson_reminder',
    title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏',
    description: '–ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —É—Ä–æ–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏',
    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
    isRead: false,
  },
  {
    id: '3',
    type: 'new_material',
    title: '–ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω',
    description: '–ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ñ–∏–∑–∏–∫–µ',
    date: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
    isRead: true,
  },
  {
    id: '4',
    type: 'payment_success',
    title: '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
    description: '–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É 5000 ‚ÇΩ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
    isRead: true,
  },
  {
    id: '5',
    type: 'group_invitation',
    title: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É',
    description: '–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"',
    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
    isRead: true,
  },
];

export const useNotifications = () => {
  const initialUnreadCount = mockNotifications.filter((n) => !n.isRead).length;

  const [state, setState] = useState<NotificationsStateT>({
    notifications: mockNotifications,
    unreadCount: initialUnreadCount,
    isLoading: false,
    error: null,
  });

  const emitNotification = useSocketEmit<{ id: string }>('notification:read');
  const emitReadAll = useSocketEmit<void>('notification:read_all');
  const emitDelete = useSocketEmit<{ id: string }>('notification:delete');
  const emitTest = useSocketEmit<NotificationT>('notification:test');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const handleNewNotification = useCallback((notification: NotificationT) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notification);

    setState((prev) => {
      const newNotifications = [notification, ...prev.notifications];
      const newUnreadCount = newNotifications.filter((n) => !n.isRead).length;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      toast(notification.title, {
        description: notification.description,
        duration: 5000,
      });

      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫:', newUnreadCount);

      return {
        ...prev,
        notifications: newNotifications,
        unreadCount: newUnreadCount,
      };
    });
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const handleTestNotification = useCallback(
    (notification: NotificationT) => {
      console.log('üß™ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç:', notification);
      handleNewNotification(notification);
    },
    [handleNewNotification],
  );

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è SocketIO
  useSocketEvent<NotificationT>('notification:new', handleNewNotification);
  useSocketEvent<NotificationT>('notification:test', handleTestNotification);

  // –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  const markAsRead = useCallback(
    (id: string) => {
      setState((prev) => {
        const updatedNotifications = prev.notifications.map((notification) =>
          notification.id === id ? { ...notification, isRead: true } : notification,
        );
        const newUnreadCount = updatedNotifications.filter((n) => !n.isRead).length;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        emitNotification({ id });

        return {
          ...prev,
          notifications: updatedNotifications,
          unreadCount: newUnreadCount,
        };
      });
    },
    [emitNotification],
  );

  // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  const markAllAsRead = useCallback(() => {
    setState((prev) => {
      const updatedNotifications = prev.notifications.map((notification) => ({
        ...notification,
        isRead: true,
      }));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      emitReadAll();

      return {
        ...prev,
        notifications: updatedNotifications,
        unreadCount: 0,
      };
    });
  }, [emitReadAll]);

  // –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const deleteNotification = useCallback(
    (id: string) => {
      setState((prev) => {
        const updatedNotifications = prev.notifications.filter((n) => n.id !== id);
        const newUnreadCount = updatedNotifications.filter((n) => !n.isRead).length;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        emitDelete({ id });

        return {
          ...prev,
          notifications: updatedNotifications,
          unreadCount: newUnreadCount,
        };
      });
    },
    [emitDelete],
  );

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const sendTestNotification = useCallback(() => {
    console.log('üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');

    const testNotification: NotificationT = {
      id: `test-${Date.now()}`,
      type: 'general',
      title: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
      date: new Date().toISOString(),
      isRead: false,
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ notification:test:', testNotification);
    emitTest(testNotification);

    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    handleNewNotification(testNotification);
  }, [emitTest, handleNewNotification]);

  return {
    ...state,
    markAsRead,
    markAllAsRead,
    deleteNotification,
    sendTestNotification,
  };
};
