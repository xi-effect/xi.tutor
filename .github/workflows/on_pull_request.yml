name: On Pull Request (Development)

on:
  pull_request:

jobs:
  namer:
    runs-on: ubuntu-latest

    steps:
      - name: Get branch & deployment name
        id: get_names
        run: |-
          branch_name=${{ github.event.pull_request.head.ref }}
          echo "branch_name=${branch_name}"
          echo "branch_name=${branch_name}" >> $GITHUB_OUTPUT

          deployment_name="${branch_name////-}"
          echo "deployment_name=${deployment_name}"
          echo "deployment_name=${deployment_name}" >> $GITHUB_OUTPUT

    outputs:
      branch_name: ${{ steps.get_names.outputs.branch_name }}
      deployment_name: ${{ steps.get_names.outputs.deployment_name }}

  main:
    needs:
      - namer
    uses: ./.github/workflows/main.yml
    with:
      base_deployment_path: .
      deployment_name: ${{ needs.namer.outputs.deployment_name }}
      github_environment_name: xi-development
    secrets: inherit

  report_deployment:
    needs:
      - namer
      - main
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate github comment message
        id: generate_github_comment_message
        shell: python
        run: |-
          result_to_status_text: dict[str, str] = {
            "success": ":heavy_check_mark:Success:heavy_check_mark:",
            "skipped": ":fast_forward:Skipped:fast_forward:",
            "failure": ":x:Failure:x:",
            "cancelled": ":grey_question:Cancelled:grey_question:",
          }

          message_rows: list[tuple[str, str, str]] = [
            ("Name", "Status", "Preview"),
            (":---:", ":---:", ":---:"),
          ]
          for build_status, deployment_status, app_name, app_domain in (
            ("${{ needs.main.outputs.xi_web_build_status }}", "${{ needs.main.outputs.xi_web_deployment_status }}", "xi.web", "app.sovlium.ru"),
          ):
            full_status = deployment_status if build_status == "success" else build_status
            message_rows.append(
              (
                app_name,
                result_to_status_text[full_status],
                f"[Visit Preview](https://{app_domain}/deployments/${{ needs.namer.outputs.deployment_name }}/enable)"
                if full_status == "success"
                else "Unavailable",
              )
            )

          message = "\n".join("|".join(message_row) for message_row in message_rows)

          import os
          with open(os.getenv("GITHUB_OUTPUT"), "a") as f:
            f.write(f"message<<EOF\n{message}\nEOF")

      - name: Comment about deployment status
        uses: thollander/actions-comment-pull-request@v3
        with:
          comment-tag: deployment_status
          message: ${{ steps.generate_github_comment_message.outputs.message }}
